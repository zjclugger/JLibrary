apply plugin: 'com.android.library'
apply plugin: 'com.novoda.bintray-release'
/*
* 组件服务、UIRouter、基类、接口、自定义组件、辅助类等，以APP业务型功能或服务
* */
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {

        debug {
            buildConfigField("String", "URL_BASE", "\"http://apiurl/api/\"")
            buildConfigField("String", "URL_HR", "\"http://apiurl/api/personnel/\"")
            buildConfigField("String", "URL_SALARY", "\"http://apiurl/payrollApi/\"")
            buildConfigField("String", "URL_FINANCE", "\"http://apiurl/api/finance/\"")
            buildConfigField("String", "URL_SYSTEM", "\"http://apiurl/api/sys/\"")
        }
        release {
            buildConfigField("String", "URL_BASE", "\"http://apiurl/api/\"")
            buildConfigField("String", "URL_HR", "\"http://apiurl/api/personnel/\"")
            buildConfigField("String", "URL_SALARY", "\"http://apiurl/\"")
            buildConfigField("String", "URL_FINANCE", "\"http://apiurl/api/finance/\"")
            buildConfigField("String", "URL_SYSTEM", "\"http://apiurl/api/sys/\"")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

/*    lintOptions {
        abortOnError false
    }*/

    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    api project(path: ':ResourceLib')
    //api project(path: ':BasicLib')

    //test
  /*  testImplementation rootProject.ext.dependencies["junit"]
    androidTestImplementation rootProject.ext.dependencies["androidxTestRunner"]
    androidTestImplementation rootProject.ext.dependencies["androidxTestEspresso"]*/

    testImplementation rootProject.ext.dependencies["junit"]

    //Arouter
    annotationProcessor rootProject.ext.dependencies["arouterCompiler"]
    //google
    annotationProcessor rootProject.ext.dependencies["autoService"]
    //permission
    annotationProcessor rootProject.ext.dependencies["permissionProcessor"]

    implementation rootProject.ext.dependencies["multidex"]

    implementation rootProject.ext.dependencies["viewpager2"]

    //layout
    api rootProject.ext.dependencies["AutoSize"]

    api rootProject.ext.dependencies["gson"]
    api rootProject.ext.dependencies["ECharts"]

    //support
    api rootProject.ext.dependencies["material"]

    //aac
    api rootProject.ext.dependencies["androidxCore"]
    api rootProject.ext.dependencies["androidxCoreRuntime"]

    //androidx
    api rootProject.ext.dependencies["androidxConstraintlayout"]
    api rootProject.ext.dependencies["androidxAppcompat"]
    // api rootProject.ext.dependencies["androidxViewmodel"]
    api rootProject.ext.dependencies["androidxRoomCommon"]
    api rootProject.ext.dependencies["androidxRoomRuntime"]
    annotationProcessor rootProject.ext.dependencies["androidxRoomCompiler"]
    api rootProject.ext.dependencies["androidxRoomRxjava2"]
    api rootProject.ext.dependencies["androidxLifecycle-ext"]

    //retrofit
    api rootProject.ext.dependencies["retrofit"]
    api rootProject.ext.dependencies["retrofitConverter-gson"]
    api rootProject.ext.dependencies["retrofitConverter-scalars"]

    //okhttp
    api rootProject.ext.dependencies["okhttp3Logging-interceptor"]
    api rootProject.ext.dependencies["okhttp3"]

    //butter knife
    api rootProject.ext.dependencies["butterknife"]

    //arouter
    api rootProject.ext.dependencies["arouter"]
    annotationProcessor rootProject.ext.dependencies["arouterCompiler"]

    api rootProject.ext.dependencies["autoService"]
    annotationProcessor rootProject.ext.dependencies["autoService"]

    //banner
    api rootProject.ext.dependencies["glide"]
    // implementation rootProject.ext.dependencies["fresco"]
    api rootProject.ext.dependencies["zxyRecovery"]

    //rxjava and rxandroid
    api rootProject.ext.dependencies["rxjava2"]
    api rootProject.ext.dependencies["rxandroid2"]

    //api rootProject.ext.dependencies["exifinterface"]

    //logger
    api rootProject.ext.dependencies["logger"]

    //permission
    api rootProject.ext.dependencies["permission"]
    annotationProcessor rootProject.ext.dependencies["permissionProcessor"]

    api rootProject.ext.dependencies["RecyclerViewAdapter"]

    // api rootProject.ext.dependencies["SuperTextView"]

    api rootProject.ext.dependencies["JPickerView"]

    api rootProject.ext.dependencies["floatingactionbutton"]

    api rootProject.ext.dependencies["retrofitAdapter-rxjava2"]

    api rootProject.ext.dependencies["LiveEventBus"]

    //SmartRefreshLayout
    api rootProject.ext.dependencies["SmartRefreshLayout"]
}

publish {
    repoName = 'maven'  //repo name default is maven
    userOrg = 'zjclugger'  //bintray username
    groupId = 'com.zjclugger.lib'  //compile part 1
    artifactId = 'JLibrary'  //module name compile part 2
    publishVersion = rootProject.ext.android["versionName"]  //version code,compile part 3
    desc = 'My project library'
    website = 'https://github.com/zjclugger/JLibrary' //github
}